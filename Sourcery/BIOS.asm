; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\dboja\Documents\Visual Studio 2015\Projects\sourcery\Sourcery\BIOS.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG4654	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4655	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, 00H, 00H
$SG4656	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4657	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'u', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'h', 00H
	DB	'i', 00H, 'p', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4658	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4659	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG4660	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4661	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4667	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4668	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4669	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4670	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	'-', 00H, '>', 00H, 'p', 00H, '_', 00H, 's', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG4724	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4725	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, 00H, 00H
$SG4726	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4727	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'u', 00H, 'm', 00H, '_', 00H, 'c', 00H, 'h', 00H
	DB	'i', 00H, 'p', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4728	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4729	DB	'p', 00H, '_', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	's', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, '-', 00H, '>'
	DB	00H, 'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG4730	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4731	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4737	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4738	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4739	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4740	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	'-', 00H, '>', 00H, 'p', 00H, '_', 00H, 's', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG4741	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4742	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, '_', 00H
	DB	'o', 00H, 'n', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e'
	DB	00H, 's', 00H, '_', 00H, 'o', 00H, 'n', 00H, '_', 00H, 's', 00H
	DB	'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'i', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, '(', 00H, ' ', 00H, 't', 00H, 'o', 00H, '_', 00H
	DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H, ')'
	DB	00H, 00H, 00H
$SG4743	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4744	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4745	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4746	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	'-', 00H, '>', 00H, 'p', 00H, '_', 00H, 's', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG4747	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4748	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4749	DB	'B', 00H, 'I', 00H, 'O', 00H, 'S', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4750	DB	'p', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'p', 00H
	DB	'-', 00H, '>', 00H, 'p', 00H, '_', 00H, 's', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
_DATA	ENDS
PUBLIC	_bios_memory_read
PUBLIC	_bios_memory_write
EXTRN	_memory_set_buffer:PROC
EXTRN	__wassert:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_p_buffer$1 = -52					; size = 4
_p_to_write$2 = -48					; size = 4
_bytes_on_second_chip$3 = -44				; size = 4
_err_code$ = -40					; size = 4
_p_to_write$4 = -36					; size = 4
_p_buffer$5 = -32					; size = 4
_start_idx$ = -28					; size = 4
_storage_per_chip$ = -24				; size = 4
_currByteIdx$6 = -20					; size = 4
_bytes_on_first_chip$7 = -16				; size = 4
_idx$8 = -12						; size = 4
_chip_idx$ = -8						; size = 4
_p_chip$ = -4						; size = 4
_p_mem_stick$ = 8					; size = 4
_addr$ = 12						; size = 4
_to_write$ = 16						; size = 4
_bios_memory_write PROC
; File c:\users\dboja\documents\visual studio 2015\projects\sourcery\sourcery\bios.c
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
; Line 66
	mov	DWORD PTR _err_code$[ebp], 0
; Line 67
	cmp	DWORD PTR _p_mem_stick$[ebp], 0
	jne	SHORT $LN14@bios_memor
	push	67					; 00000043H
	push	OFFSET $SG4724
	push	OFFSET $SG4725
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@bios_memor:
; Line 68
	mov	ecx, DWORD PTR _p_mem_stick$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN15@bios_memor
	push	68					; 00000044H
	push	OFFSET $SG4726
	push	OFFSET $SG4727
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@bios_memor:
; Line 69
	mov	ecx, DWORD PTR _p_mem_stick$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@bios_memor
	push	69					; 00000045H
	push	OFFSET $SG4728
	push	OFFSET $SG4729
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@bios_memor:
; Line 71
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p_mem_stick$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _p_chip$[ebp], ecx
; Line 72
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN17@bios_memor
	push	72					; 00000048H
	push	OFFSET $SG4730
	push	OFFSET $SG4731
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@bios_memor:
; Line 73
	mov	eax, DWORD PTR _p_chip$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _p_chip$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _storage_per_chip$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _addr$[ebp]
	xor	edx, edx
	div	DWORD PTR _storage_per_chip$[ebp]
	mov	DWORD PTR _chip_idx$[ebp], eax
; Line 76
	mov	eax, DWORD PTR _chip_idx$[ebp]
	imul	eax, DWORD PTR _storage_per_chip$[ebp]
	mov	ecx, DWORD PTR _addr$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _start_idx$[ebp], ecx
; Line 77
	mov	edx, DWORD PTR _p_mem_stick$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _chip_idx$[ebp], eax
	jb	SHORT $LN8@bios_memor
; Line 78
	mov	DWORD PTR _err_code$[ebp], 2
	jmp	$end$25
$LN8@bios_memor:
; Line 79
	mov	ecx, DWORD PTR _start_idx$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _storage_per_chip$[ebp]
	jb	$LN10@bios_memor
; Line 82
	mov	edx, DWORD PTR _chip_idx$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jb	SHORT $LN12@bios_memor
; Line 83
	jmp	$end$25
$LN12@bios_memor:
; Line 86
	mov	edx, DWORD PTR _storage_per_chip$[ebp]
	sub	edx, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _bytes_on_first_chip$7[ebp], edx
; Line 88
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _chip_idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p_chip$[ebp], eax
; Line 89
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN18@bios_memor
	push	89					; 00000059H
	push	OFFSET $SG4737
	push	OFFSET $SG4738
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@bios_memor:
; Line 90
	mov	edx, DWORD PTR _p_chip$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN19@bios_memor
	push	90					; 0000005aH
	push	OFFSET $SG4739
	push	OFFSET $SG4740
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@bios_memor:
; Line 91
	mov	ecx, DWORD PTR _p_chip$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _p_buffer$5[ebp], edx
; Line 92
	lea	eax, DWORD PTR _to_write$[ebp]
	mov	DWORD PTR _p_to_write$4[ebp], eax
; Line 93
	mov	DWORD PTR _idx$8[ebp], 0
	jmp	SHORT $LN4@bios_memor
$LN2@bios_memor:
	mov	ecx, DWORD PTR _idx$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _idx$8[ebp], ecx
$LN4@bios_memor:
	mov	edx, DWORD PTR _idx$8[ebp]
	cmp	edx, DWORD PTR _bytes_on_first_chip$7[ebp]
	jae	SHORT $LN3@bios_memor
; Line 94
	mov	eax, DWORD PTR _p_buffer$5[ebp]
	add	eax, DWORD PTR _idx$8[ebp]
	mov	ecx, DWORD PTR _p_to_write$4[ebp]
	add	ecx, DWORD PTR _idx$8[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@bios_memor
$LN3@bios_memor:
; Line 97
	mov	eax, 4
	sub	eax, DWORD PTR _bytes_on_first_chip$7[ebp]
	mov	DWORD PTR _bytes_on_second_chip$3[ebp], eax
; Line 98
	mov	ecx, DWORD PTR _bytes_on_first_chip$7[ebp]
	add	ecx, DWORD PTR _bytes_on_second_chip$3[ebp]
	cmp	ecx, 4
	je	SHORT $LN20@bios_memor
	push	98					; 00000062H
	push	OFFSET $SG4741
	push	OFFSET $SG4742
	call	__wassert
	add	esp, 12					; 0000000cH
$LN20@bios_memor:
; Line 99
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _chip_idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+4]
	mov	DWORD PTR _p_chip$[ebp], eax
; Line 100
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN21@bios_memor
	push	100					; 00000064H
	push	OFFSET $SG4743
	push	OFFSET $SG4744
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@bios_memor:
; Line 101
	mov	edx, DWORD PTR _p_chip$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN22@bios_memor
	push	101					; 00000065H
	push	OFFSET $SG4745
	push	OFFSET $SG4746
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@bios_memor:
; Line 102
	mov	ecx, DWORD PTR _p_chip$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _p_buffer$5[ebp], edx
; Line 103
	mov	eax, DWORD PTR _bytes_on_first_chip$7[ebp]
	mov	DWORD PTR _currByteIdx$6[ebp], eax
	jmp	SHORT $LN7@bios_memor
$LN5@bios_memor:
	mov	ecx, DWORD PTR _currByteIdx$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _currByteIdx$6[ebp], ecx
$LN7@bios_memor:
	cmp	DWORD PTR _currByteIdx$6[ebp], 4
	jae	SHORT $LN6@bios_memor
; Line 104
	mov	edx, DWORD PTR _currByteIdx$6[ebp]
	sub	edx, DWORD PTR _bytes_on_first_chip$7[ebp]
	mov	eax, DWORD PTR _p_chip$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _p_to_write$4[ebp]
	add	eax, DWORD PTR _currByteIdx$6[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+edx], al
	jmp	SHORT $LN5@bios_memor
$LN6@bios_memor:
; Line 105
	jmp	SHORT $end$25
$LN10@bios_memor:
; Line 109
	mov	ecx, DWORD PTR _p_mem_stick$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _chip_idx$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _p_chip$[ebp], ecx
; Line 110
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN23@bios_memor
	push	110					; 0000006eH
	push	OFFSET $SG4747
	push	OFFSET $SG4748
	call	__wassert
	add	esp, 12					; 0000000cH
$LN23@bios_memor:
; Line 111
	mov	eax, DWORD PTR _p_chip$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN24@bios_memor
	push	111					; 0000006fH
	push	OFFSET $SG4749
	push	OFFSET $SG4750
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@bios_memor:
; Line 113
	mov	edx, DWORD PTR _p_chip$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _p_buffer$1[ebp], eax
; Line 114
	lea	ecx, DWORD PTR _to_write$[ebp]
	mov	DWORD PTR _p_to_write$2[ebp], ecx
; Line 115
	push	4
	mov	edx, DWORD PTR _p_to_write$2[ebp]
	push	edx
	mov	eax, DWORD PTR _p_buffer$1[ebp]
	push	eax
	call	_memory_set_buffer
	add	esp, 12					; 0000000cH
$end$25:
; Line 119
	mov	eax, DWORD PTR _err_code$[ebp]
; Line 120
	mov	esp, ebp
	pop	ebp
	ret	0
_bios_memory_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size_to_read_total$1 = -44				; size = 4
_p_buffer$2 = -40					; size = 4
_err_code$ = -36					; size = 4
_p_read_buffer$3 = -32					; size = 4
_p_buffer$4 = -28					; size = 4
_bytes_on_first_chip$5 = -24				; size = 4
_start_idx$ = -20					; size = 4
_storage_per_chip$ = -16				; size = 4
_chip_idx$ = -12					; size = 4
_p_chip$ = -8						; size = 4
_curr_byte_idx$6 = -2					; size = 1
_curr_byte_idx$7 = -1					; size = 1
_p_mem_stick$ = 8					; size = 4
_addr$ = 12						; size = 4
_p_mem_value$ = 16					; size = 4
_bios_memory_read PROC
; File c:\users\dboja\documents\visual studio 2015\projects\sourcery\sourcery\bios.c
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
; Line 14
	mov	DWORD PTR _err_code$[ebp], 0
; Line 15
	cmp	DWORD PTR _p_mem_stick$[ebp], 0
	jne	SHORT $LN14@bios_memor
	push	15					; 0000000fH
	push	OFFSET $SG4654
	push	OFFSET $SG4655
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@bios_memor:
; Line 16
	mov	ecx, DWORD PTR _p_mem_stick$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN15@bios_memor
	push	16					; 00000010H
	push	OFFSET $SG4656
	push	OFFSET $SG4657
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@bios_memor:
; Line 17
	mov	ecx, DWORD PTR _p_mem_stick$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@bios_memor
	push	17					; 00000011H
	push	OFFSET $SG4658
	push	OFFSET $SG4659
	call	__wassert
	add	esp, 12					; 0000000cH
$LN16@bios_memor:
; Line 19
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p_mem_stick$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _p_chip$[ebp], ecx
; Line 20
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN17@bios_memor
	push	20					; 00000014H
	push	OFFSET $SG4660
	push	OFFSET $SG4661
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@bios_memor:
; Line 21
	mov	eax, DWORD PTR _p_chip$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	mov	edx, DWORD PTR _p_chip$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _storage_per_chip$[ebp], ecx
; Line 22
	mov	eax, DWORD PTR _addr$[ebp]
	xor	edx, edx
	div	DWORD PTR _storage_per_chip$[ebp]
	mov	DWORD PTR _chip_idx$[ebp], eax
; Line 23
	mov	eax, DWORD PTR _chip_idx$[ebp]
	imul	eax, DWORD PTR _storage_per_chip$[ebp]
	mov	ecx, DWORD PTR _addr$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _start_idx$[ebp], ecx
; Line 25
	mov	edx, DWORD PTR _p_mem_stick$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	DWORD PTR _chip_idx$[ebp], eax
	jb	SHORT $LN8@bios_memor
; Line 26
	mov	DWORD PTR _err_code$[ebp], 2
	jmp	$end$20
$LN8@bios_memor:
; Line 27
	mov	ecx, DWORD PTR _start_idx$[ebp]
	add	ecx, 4
	cmp	ecx, DWORD PTR _storage_per_chip$[ebp]
	jb	$LN10@bios_memor
; Line 30
	mov	edx, DWORD PTR _chip_idx$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jb	SHORT $LN12@bios_memor
; Line 31
	jmp	$end$20
$LN12@bios_memor:
; Line 33
	mov	DWORD PTR _size_to_read_total$1[ebp], 4
; Line 34
	mov	edx, DWORD PTR _p_mem_value$[ebp]
	mov	DWORD PTR _p_read_buffer$3[ebp], edx
; Line 37
	mov	eax, DWORD PTR _storage_per_chip$[ebp]
	sub	eax, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _bytes_on_first_chip$5[ebp], eax
; Line 38
	mov	ecx, DWORD PTR _p_chip$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _p_buffer$4[ebp], edx
; Line 39
	mov	BYTE PTR _curr_byte_idx$7[ebp], 0
	jmp	SHORT $LN4@bios_memor
$LN2@bios_memor:
	mov	al, BYTE PTR _curr_byte_idx$7[ebp]
	add	al, 1
	mov	BYTE PTR _curr_byte_idx$7[ebp], al
$LN4@bios_memor:
	movzx	ecx, BYTE PTR _curr_byte_idx$7[ebp]
	cmp	ecx, DWORD PTR _bytes_on_first_chip$5[ebp]
	jae	SHORT $LN3@bios_memor
; Line 40
	movzx	edx, BYTE PTR _curr_byte_idx$7[ebp]
	movzx	eax, BYTE PTR _curr_byte_idx$7[ebp]
	mov	ecx, DWORD PTR _p_read_buffer$3[ebp]
	mov	esi, DWORD PTR _p_buffer$4[ebp]
	mov	dl, BYTE PTR [esi+edx]
	mov	BYTE PTR [ecx+eax], dl
	jmp	SHORT $LN2@bios_memor
$LN3@bios_memor:
; Line 43
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _chip_idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+4]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _p_buffer$4[ebp], ecx
; Line 44
	mov	dl, BYTE PTR _bytes_on_first_chip$5[ebp]
	mov	BYTE PTR _curr_byte_idx$6[ebp], dl
	jmp	SHORT $LN7@bios_memor
$LN5@bios_memor:
	mov	al, BYTE PTR _curr_byte_idx$6[ebp]
	add	al, 1
	mov	BYTE PTR _curr_byte_idx$6[ebp], al
$LN7@bios_memor:
	movzx	ecx, BYTE PTR _curr_byte_idx$6[ebp]
	cmp	ecx, 4
	jae	SHORT $LN6@bios_memor
; Line 45
	movzx	edx, BYTE PTR _curr_byte_idx$6[ebp]
	sub	edx, DWORD PTR _bytes_on_first_chip$5[ebp]
	movzx	eax, BYTE PTR _curr_byte_idx$6[ebp]
	mov	ecx, DWORD PTR _p_read_buffer$3[ebp]
	mov	esi, DWORD PTR _p_buffer$4[ebp]
	mov	dl, BYTE PTR [esi+edx]
	mov	BYTE PTR [ecx+eax], dl
	jmp	SHORT $LN5@bios_memor
$LN6@bios_memor:
; Line 46
	jmp	SHORT $end$20
$LN10@bios_memor:
; Line 51
	mov	eax, DWORD PTR _p_mem_stick$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _chip_idx$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _p_chip$[ebp], eax
; Line 52
	cmp	DWORD PTR _p_chip$[ebp], 0
	jne	SHORT $LN18@bios_memor
	push	52					; 00000034H
	push	OFFSET $SG4667
	push	OFFSET $SG4668
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@bios_memor:
; Line 53
	mov	edx, DWORD PTR _p_chip$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN19@bios_memor
	push	53					; 00000035H
	push	OFFSET $SG4669
	push	OFFSET $SG4670
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@bios_memor:
; Line 55
	mov	ecx, DWORD PTR _p_chip$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _start_idx$[ebp]
	mov	DWORD PTR _p_buffer$2[ebp], edx
; Line 56
	mov	eax, DWORD PTR _p_mem_value$[ebp]
	mov	ecx, DWORD PTR _p_buffer$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$end$20:
; Line 60
	mov	eax, DWORD PTR _err_code$[ebp]
; Line 61
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_bios_memory_read ENDP
_TEXT	ENDS
END
